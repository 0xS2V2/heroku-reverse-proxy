## Taytay:
## The below contents and nginx_3scale_access.lua are created by 3Scale by
## following the steps here:
## https://support.3scale.net/howtos/api-configuration/nginx-proxy
##
## (I've taken the generated .conf file and modified it to work on Heroku)
## You'll replace the contents below with the .conf file that 3Scale gives you
## Then, you'll make the same minor modifications I did. Just search for
## 'HEROKU CHANGE:'
## 3Scale already has some change markers called "NEED CHANGE"
## You can probably ignore them for the simplest tests

## NEED CHANGE (defines the user of the nginx workers)
# user user group;

## THIS PARAMETERS BE SAFELY OVER RIDDEN BY YOUR DEFAULT NGINX CONF
worker_processes  2;
error_log logs/error.log warn;
# HEROKU CHANGE: We don't want it running as a daemon, but as a normal process
daemon off;

events {
    worker_connections 256;
}

http {
  lua_shared_dict api_keys 10m;

  upstream backend_api-sentiment.3scale.net {
    # service name: API ;
    server api-sentiment.3scale.net:80 max_fails=5 fail_timeout=30;
  }

  upstream threescale_backend {
    server su1.3scale.net:80; #su1.3scale.net:80; #
  }

  server {
    #HEROKU CHANGE: We have to have this placeholder port in here to work on Heroku
    listen ${{PORT}};

    ## HEROKU CHANGE: CHANGE YOUR SERVER NAME TO YOUR CUSTOM DOMAIN OR COMMENT IT OUT IF ONLY HAVE ONE
    #server_name api-proxy-3scale-heroku.herokuapp.com;
    underscores_in_headers on;

    location = /threescale_authrep {
      internal;
      ## HEROKU CHANGE: MAKE A HEROKU ENVIRONMENT VARIABLE CALLED 3SCALE_PROVIDER_KEY
      ## >heroku config:set 3SCALE_PROVIDER_KEY=1239832745abcde...
      ## 3Scale normally hardcodes the provider_key here, but if you want to avoid
      ## checking that into source code, you can use Heroku environment variables
      set $provider_key "${{3SCALE_PROVIDER_KEY}}";

      proxy_pass http://threescale_backend/transactions/authrep.xml?provider_key=$provider_key&service_id=$service_id&$usage&$credentials;
      proxy_set_header  Host  su1.3scale.net;
    }

    location = /out_of_band_authrep_action {
      internal;
      proxy_pass_request_headers off;
      ##needs to be in both places, better not to have it on location / for potential security issues, req. are internal
      ## HEROKU CHANGE: MAKE A HEROKU ENVIRONMENT VARIABLE CALLED 3SCALE_PROVIDER_KEY
      ## >heroku config:set 3SCALE_PROVIDER_KEY=1239832745abcde...
      set $provider_key "${{3SCALE_PROVIDER_KEY}}";


      content_by_lua '
        if ngx.var.cached_key ~= nil then
          local res1 = ngx.location.capture("/threescale_authrep", { share_all_vars = true })
          if res1.status ~= 200 then
            local api_keys = ngx.shared.api_keys
            api_keys:delete(ngx.var.cached_key)
          end

          ngx.status = 200
          ngx.header.content_length = 0
          ngx.exit(ngx.HTTP_OK)
        else
          ngx.status = 200
          ngx.header.content_length = 0
          ngx.exit(ngx.HTTP_OK)
        end
      ';

    }

    location / {
      set $provider_key null;
      set $cached_key null;
      set $credentials null;
      set $usage null;
      ## HEROKU CHANGE: This will be your own service id as told by 3Scale
      set $service_id 1234567890;
      set $proxy_pass null;
      set $secret_token null;

      proxy_ignore_client_abort on;

      ## You don't need to change this unless you put the lua file in a different spot
      ## CHANGE THE PATH TO POINT TO THE RIGHT FILE ON YOUR FILESYSTEM
      access_by_lua_file nginx_3scale_access.lua;

      proxy_pass $proxy_pass ;
      proxy_set_header  X-Real-IP  $remote_addr;
      proxy_set_header  Host  $host;
      proxy_set_header X-3scale-proxy-secret-token $secret_token;
      add_header X-3scale-proxy-secret-token $secret_token;

      post_action /out_of_band_authrep_action;
    }
  }


}
